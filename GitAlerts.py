import sys, re
from logging import basicConfig, getLogger, INFO
from flask import Flask, request, jsonify
from html import escape
from requests import get, post
from os import environ
import config

from telegram.ext import (
      CommandHandler,
      Updater,
      CallbackContext,
)

from telegram import (
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    Update,
    ParseMode,
)

server = Flask(__name__)

basicConfig(level=INFO)
log = getLogger()

ENV = bool(environ.get('ENV', False))

if ENV:
    BOT_TOKEN = environ.get('BOT_TOKEN', None)
    PROJECT_NAME = environ.get('PROJECT_NAME', None)
    ip_addr = environ.get('APP_URL', None)
    GIT_REPO_URL = environ.get('GIT_REPO_URL', "https://github.com/Itz-mst-boy/GitAlerts")
else:
    BOT_TOKEN = config.BOT_TOKEN
    PROJECT_NAME = config.PROJECT_NAME
    ip_addr = get('https://api.ipify.org').text
    GIT_REPO_URL = config.GIT_REPO_URL

updater = Updater(token=BOT_TOKEN, workers=1)
dispatcher = updater.dispatcher

print("If you need more help, join @worldwide_friend_zone in Telegram.")

xa = bytearray.fromhex("54 65 61 6D 53 63 65 6E 61 72 69 6F 2F 47 69 74 41 6C 65 72 74 73").decode()
axx = bytearray.fromhex("43 6F 64 65 72 58").decode()
xxc = bytearray.fromhex("54 65 61 6D 53 63 65 6E 61 72 69 6F").decode()
SOURCE = xa
DEVELOPER = axx
UPDATES = xxc

def help(update: Update, context: CallbackContext):
    message = update.effective_message
    textto = "To get alerts about your repository follow the steps below \n\n1.Add @githubX_robot in your group where you want bot to send alerts. \n\n2.Send /id command. \n\n3.Send /connect <Your group id> (must start with -100) \n\n4. Add this bot in that group where you want to receive alerts."
    pic = "https://telegra.ph/file/4bd73ea5fb0d663c866c6.jpg"
    buttons1 = [
            [
              InlineKeyboardButton("…¥·¥è·¥è ô", url=f"https://t.me/{DEVELOPER}"),
              InlineKeyboardButton ("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás", url=f"https://t.me/{UPDATES}"),
            ],
            [
             InlineKeyboardButton(" Ä·¥á·¥ò·¥è", url=f"https://github.com/{SOURCE}")],
       ]
    markup_lol = InlineKeyboardMarkup(buttons1)
    update.message.reply_photo(photo=pic, caption=textto, reply_markup=markup_lol)


def lol(update: Update, context: CallbackContext):
    message = update.effective_message
    Pop = "https://telegra.ph/file/4bd73ea5fb0d663c866c6.jpg"
    text = " ú·¥á ü ü·¥è ·¥õ ú·¥á Ä·¥á …™'·¥ç …¢…™·¥õ·¥Ä ü·¥á Ä·¥õs  ô·¥è·¥õ ·¥ç·¥Ä·¥Ö·¥á  ô è @mr_sukkun \n·¥Ñ ú·¥á·¥Ñ·¥ã s·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò “ì·¥è Ä  ú·¥á ü·¥ò  Ä·¥á…¢·¥Ä Ä·¥Ö…™…¥…¢  ô·¥è·¥õ ·¥è Ä ·¥Ö·¥á·¥ò ü·¥è è·¥ç·¥á…¥·¥õ. \n\n“ì·¥è Ä  ú·¥á ü·¥ò s·¥á…¥·¥Ö /help \n “ì·¥è Ä s·¥è·¥ú Ä·¥Ñ·¥á s·¥á…¥·¥Ö /repo"
    
    buttons = [
             [
               InlineKeyboardButton("s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/worldwide_friend_zone"),
               InlineKeyboardButton("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás", url=f"https://t.me/{UPDATES}"),
             ],
             [InlineKeyboardButton("s·¥è·¥ú Ä·¥Ñ·¥á", url=f"https://github.com/{SOURCE}")],  
          ]

    reply_markup = InlineKeyboardMarkup(buttons)
    update.message.reply_photo(photo=Pop, caption=text, reply_markup=reply_markup)


def source(update: Update, context: CallbackContext):
    message = update.effective_message
    textto = "s·¥è·¥ú Ä·¥Ñ·¥á  ·¥è“ì ·¥õ ú…™s  ô·¥è·¥õ  ô·¥Ä·¥ç ô è"
    pic = "https://telegra.ph/file/4bd73ea5fb0d663c866c6.jpg"
    buttons1 = [
            [
              InlineKeyboardButton("·¥è·¥°…¥·¥á Ä", url=f"https://t.me/{DEVELOPER}"),
              InlineKeyboardButton ("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás", url=f"https://t.me/{UPDATES}"),
            ],
            [
             InlineKeyboardButton("s·¥è·¥ú Ä·¥Ñ·¥á", url=f"https://github.com/{SOURCE}")],
       ]
    markup_lol = InlineKeyboardMarkup(buttons1)
    update.message.reply_photo(photo=pic, caption=textto, reply_markup=markup_lol)

def connect(update: Update, context: CallbackContext):
    message = update.effective_message
    text = message.text[len("/connect ") :]

    if not text:
        reply_text = "Kindly give some text"
    x = re.search("^-100", text)

    if x:
        reply_text = f"·¥ò·¥Ä è ü·¥è·¥Ä·¥Ö ·¥ú Ä ü  ô·¥Ä ô è: `https://gitalertbot.herokuapp.com//{text}` \n\ns·¥á…¥·¥Ö /morehelp “ì·¥è Ä ·¥ç·¥è Ä·¥á  ú·¥á ü·¥ò."
        message.reply_text(reply_text, parse_mode=ParseMode.MARKDOWN)
    else:
        reply_text = "·¥° Ä·¥è…¥…¢ ·¥Ñ ú·¥Ä·¥õ …™·¥Ö! …™·¥õ ·¥ç·¥ús·¥õ s·¥õ·¥Ä Ä·¥õ ·¥°…™·¥õ ú -1001 ·¥è Ä -100"

def getSourceCodeLink(_bot, update):
    """·¥ò·¥ú ü üs  ü…™…¥·¥ã  ·¥õ·¥è ·¥õ ú·¥á s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á."""
    message = update.effective_message
    message.reply_text(
        f"{GIT_REPO_URL}"
    )

def more_help(update: Update, context: CallbackContext):
    tt = "1.…¢·¥è  ·¥õ·¥è   Ä·¥á·¥ò·¥è  s·¥á·¥õ·¥õ…™…¥…¢s \n2.“ì…™…¥·¥Ö ·¥°·¥á ô ú·¥è·¥è·¥ãs ·¥õ ú·¥á Ä·¥á  \n3.·¥Ä·¥Ö·¥Ö  ·¥ò·¥Ä è ü·¥è·¥Ä·¥Ö ·¥ú Ä ü  ·¥õ ú·¥á Ä·¥á \n\n4. ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õ ·¥õ è·¥ò·¥á ·¥õ·¥è application/json \n\n5.·¥° ú…™·¥Ñ ú ·¥á·¥†·¥á…¥·¥õs ·¥°·¥è·¥ú ü·¥Ö   è·¥è·¥ú  ü…™·¥ã·¥á ·¥õ·¥è ·¥õ Ä…™…¢…¢·¥á Ä ·¥õ ú…™s ·¥°·¥á ô ú·¥è·¥è·¥ã? \n√¢‚Ç¨¬¢ ·¥Ñ ú·¥è·¥ès·¥á 1st or 2nd ·¥è·¥ò·¥õ…™·¥è…¥ \n\n6. ·¥Ä·¥Ö·¥Ö ·¥°·¥á ô ú·¥è·¥è·¥ã \n7.  ·¥Ñ·¥è·¥ç…¢·¥è ·¥ú·¥ç·¥ã…™ ü “ì…™…¥·¥Ä ü ü è ·¥Ö·¥è…¥·¥á !"
    image = "https://telegra.ph/file/0239f2414d3430c29338f.jpg"
    btn = [
          [
           InlineKeyboardButton("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás", url=f"https://t.me/{UPDATES}"),
           InlineKeyboardButton("·¥è·¥°…¥·¥á Ä", url=f"https://t.me/{DEVELOPER}"),
          ],
      ]
    haha = InlineKeyboardMarkup(btn)
    update.message.reply_photo(photo=image, caption=tt, reply_markup=haha)


dispatcher.add_handler(CommandHandler("start", lol, run_async=True))
dispatcher.add_handler(CommandHandler("help", help, run_async=True))
dispatcher.add_handler(CommandHandler("repo", source, run_async=True))
dispatcher.add_handler(CommandHandler("connect", connect, run_async=True))
dispatcher.add_handler(CommandHandler("morehelp", more_help, run_async=True))
updater.start_polling()

TG_BOT_API = f'https://api.telegram.org/bot{BOT_TOKEN}/'
checkbot = get(TG_BOT_API + "getMe").json()
if not checkbot['ok']:
    log.error("[ERROR] Invalid Token!")
    exit(1)
else:
    username = checkbot['result']['username']
    log.info(
        f"[INFO]  ü·¥è…¢…¢·¥á·¥Ö …™…¥ ·¥Äs @{username}, ·¥°·¥Ä…™·¥õ…™…¥…¢ “ì·¥è Ä ·¥°·¥á ô ú·¥è·¥è·¥ã  Ä·¥á«´·¥ú·¥ás·¥õs...")


def post_tg(chat, message, parse_mode):
    """Send message to desired group"""
    response = post(
        TG_BOT_API + "sendMessage",
        params={
            "chat_id": chat,
            "text": message,
            "parse_mode": parse_mode,
            "disable_web_page_preview": True}).json()
    return response


def reply_tg(chat, message_id, message, parse_mode):
    """reply to message_id"""
    response = post(
        TG_BOT_API + "sendMessage",
        params={
            "chat_id": chat,
            "reply_to_message_id": message_id,
            "text": message,
            "parse_mode": parse_mode,
            "disable_web_page_preview": True}).json()
    return response


@server.route("/", methods=['GET'])
# Just send ' ú·¥á ü ü·¥è, ·¥°·¥è Ä ü·¥Ö!' ·¥õ·¥è ·¥õ·¥á ü ü  that our server is up.
def helloWorld():
    return ' ú·¥á ü ü·¥è, ·¥°·¥è Ä ü·¥Ö!'


@server.route("/<groupid>", methods=['GET', 'POST'])
def git_api(groupid):
    """ Ä·¥á«´·¥ú·¥ás·¥õs ·¥õ·¥è api.github.com"""
    data = request.json
    if not data:
        return f"<b>·¥Ä·¥Ö·¥Ö ·¥õ ú…™s ·¥ú Ä ü:</b> {ip_addr}/{groupid} ·¥õ·¥è ·¥°·¥á ô ú·¥è·¥è·¥ãs ·¥è“ì ·¥õ ú·¥á ·¥ò Ä·¥è·¥ä·¥á·¥Ñ·¥õ"

    if data.get('hook'):
        repo_url = data['repository']['html_url']
        repo_name = data['repository']['name']
        sender_url = data['sender']['html_url']
        sender_name = data['sender']['login']
        response = post_tg(
            groupid,
            f"üåü s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á·¥õ ·¥°·¥á ô ú·¥è·¥è·¥ã “ì·¥è Ä <a href='{repo_url}'>{repo_name}</a> by <a href='{sender_url}'>{sender_name}</a>!",
            "html"
        )
        return response

    if data.get('commits'):
        commits_text = ""
        rng = len(data['commits'])
        if rng > 10:
            rng = 10
        for x in range(rng):
            commit = data['commits'][x]
            if len(escape(commit['message'])) > 300:
                commit_msg = escape(commit['message']).split("\n")[0]
            else:
                commit_msg = escape(commit['message'])
            commits_text += f"{commit_msg}\n<a href='{commit['url']}'>{commit['id'][:7]}</a> - {commit['author']['name']} {escape('<')}{commit['author']['email']}{escape('>')}\n\n"
            if len(commits_text) > 1000:
                text = f"""‚ú® <b>{escape(data['repository']['name'])}</b> - New {len(data['commits'])} commits ({escape(data['ref'].split('/')[-1])})
{commits_text}
"""
                response = post_tg(groupid, text, "html")
                commits_text = ""
        if not commits_text:
            return jsonify({"ok": True, "text": "Commits text is none"})
        text = f"""‚ú®¬® <b>{escape(data['repository']['name'])}</b> - New {len(data['commits'])} commits ({escape(data['ref'].split('/')[-1])})
{commits_text}
"""
        if len(data['commits']) > 10:
            text += f"\n\n<i>And {len(data['commits']) - 10} other commits</i>"
        response = post_tg(groupid, text, "html")
        return response

    if data.get('issue'):
        if data.get('comment'):
            text = f"""üö®‚Äô¬¨ …¥·¥á·¥° ·¥Ñ·¥è·¥ç·¥ç·¥á…¥·¥õ: <b>{escape(data['repository']['name'])}</b>
{escape(data['comment']['body'])}

<a href='{data['comment']['html_url']}'>…™ss·¥ú·¥á #{data['issue']['number']}</a>
"""
            response = post_tg(groupid, text, "html")
            return response
        text = f"""üö®¬® …¥·¥á·¥° {data['action']} …™ss·¥ú·¥á “ì·¥è Ä <b>{escape(data['repository']['name'])}</b>
<b>{escape(data['issue']['title'])}</b>
{escape(data['issue']['body'])}

<a href='{data['issue']['html_url']}'>issue #{data['issue']['number']}</a>
"""
        response = post_tg(groupid, text, "html")
        return response

    if data.get('pull_request'):
        if data.get('comment'):
            text = f"""üí¨‚Äî ·¥õ ú·¥á Ä·¥á …™s ·¥Ä …¥·¥á·¥° ·¥ò·¥ú ü ü  Ä·¥á«´·¥ú·¥ás·¥õ “ì·¥è Ä <b>{escape(data['repository']['name'])}</b> ({data['pull_request']['state']})
{escape(data['comment']['body'])}

<a href='{data['comment']['html_url']}'>·¥ò·¥ú ü ü  Ä·¥á«´·¥ú·¥ás·¥õ #{data['issue']['number']}</a>
"""
            response = post_tg(groupid, text, "html")
            return response
        text = f"""‚ùó‚Äî  …¥·¥á·¥° {data['action']} ·¥ò·¥ú ü ü  Ä·¥á«´·¥ú·¥ás·¥õ “ì·¥è Ä <b>{escape(data['repository']['name'])}</b>
<b>{escape(data['pull_request']['title'])}</b> ({data['pull_request']['state']})
{escape(data['pull_request']['body'])}

<a href='{data['pull_request']['html_url']}'>Pull request #{data['pull_request']['number']}</a>
"""
        response = post_tg(groupid, text, "html")
        return response

    if data.get('forkee'):
        response = post_tg(
            groupid,
            f"üçÄ¬¥ <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a> “ì·¥è Ä·¥ã·¥á·¥Ö <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a>!\n·¥õ·¥è·¥õ·¥Ä ü “ì·¥è Ä·¥ãs …¥·¥è·¥° ·¥Ä Ä·¥á {data['repository']['forks_count']}",
            "html")
        return response

    if data.get('action'):

        if data.get('action') == "published" and data.get('release'):
            text = f"<a href='{data['sender']['html_url']}'>{data['sender']['login']}</a> {data['action']} <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a>!"
            text += f"\n\n<b>{data['release']['name']}</b> ({data['release']['tag_name']})\n{data['release']['body']}\n\n<a href='{data['release']['tarball_url']}'>·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥õ·¥Ä Ä</a> | <a href='{data['release']['zipball_url']}'>·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥¢…™·¥ò</a>"
            response = post_tg(groupid, text, "html")
            return response

        if data.get('action') == "started":
            text = f"üíò <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a> …¢·¥Ä·¥†·¥á ·¥Ä s·¥õ·¥Ä Ä ·¥õ·¥è <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a>!\n·¥õ·¥è·¥õ·¥Ä ü s·¥õ·¥Ä Äs ·¥Ä Ä·¥á …¥·¥è·¥° {data['repository']['stargazers_count']}"
            response = post_tg(groupid, text, "html")
            return response

        if data.get('action') == "edited" and data.get('release'):
            text = f"<a href='{data['sender']['html_url']}'>{data['sender']['login']}</a> {data['action']} <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a>!"
            text += f"\n\n<b>{data['release']['name']}</b> ({data['release']['tag_name']})\n{data['release']['body']}\n\n<a href='{data['release']['tarball_url']}'>Download tar</a> | <a href='{data['release']['zipball_url']}'>·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥¢…™·¥ò</a>"
            response = post_tg(groupid, text, "html")
            return response

        if data.get('action') == "created":
            return jsonify({"ok": True, "text": "Pass trigger for created"})

        response = post_tg(
            groupid,
            f"<a href='{data['sender']['html_url']}'>{data['sender']['login']}</a> {data['action']} <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a>!",
            "html")
        return response

    if data.get('ref_type'):
        response = post_tg(
            groupid,
            f"A new {data['ref_type']} on <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a> was created by <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a>!",
            "html")
        return response

    if data.get('created'):
        response = post_tg(groupid,
                           f"Branch {data['ref'].split('/')[-1]} <b>{data['ref'].split('/')[-2]}</b> on <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a> was created by <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a>!",
                           "html")
        return response

    if data.get('deleted'):
        response = post_tg(groupid,
                           f"Branch {data['ref'].split('/')[-1]} <b>{data['ref'].split('/')[-2]}</b> on <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a> was deleted by <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a>!",
                           "html")
        return response
    xx = bytearray.fromhex("43 6F 64 65 72 58").decode()
    fck = bytearray.fromhex("54 65 61 6D 53 63 65 6E 61 72 69 6F 2F 47 69 74 41 6C 65 72 74 73").decode()
    dkb = bytearray.fromhex("54 65 61 6D 53 63 65 6E 61 72 69 6F").decode()
    if DEVELOPER != xx:
       print("So sad, you have change developer, change it back to itz_mst_boy else I won't work")
       sys.exit(1)

    if SOURCE != fck:
       print("So sad, you have changed source, change it back to Itz-mst-boy/GitAlerts else I won't work")
       sys.exit(1)

    if UPDATES != dkb:
       print("So sad, you have changed Updates, change it back to mr_sukkun else I won't work")
       sys.exit(1)

    if data.get('forced'):
        response = post_tg(groupid,
                           f"Branch {data['ref'].split('/')[-1]} <b>{data['ref'].split('/')[-2]}</b>" +
                           " on <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a> was" +
                           " forced by <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a>!",
                           "html")
        return response

    if data.get('pages'):
        text = f"<a href='{data['repository']['html_url']}'>{data['repository']['name']}</a> wiki pages were updated by <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a>!\n\n"
        for x in data['pages']:
            summary = ""
            if x['summary']:
                summary = f"{x['summary']}\n"
            text += f"üìë<b>{escape(x['title'])}</b> ({x['action']})\n{summary}<a href='{x['html_url']}'>{x['page_name']}</a> - {x['sha'][:7]}"
            if len(data['pages']) >= 2:
                text += "\n=====================\n"
            response = post_tg(groupid, text, "html")
        return response

    if data.get('context'):
        if data.get('state') == "pending":
            emo = "‚è≥"
        elif data.get('state') == "success":
            emo = "‚úÖ"
        elif data.get('state') == "failure":
            emo = "‚ùå"
        else:
            emo = "üî∞"
        response = post_tg(
            groupid,
            f"{emo} <a href='{data['target_url']}'>{data['description']}</a>" +
            " on <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a>" +
            " by <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a>!" +
            "\nLatest commit:\n<a href='{data['commit']['commit']['url']}'>{escape(data['commit']['commit']['message'])}</a>",
            "html")
        return response

    url = deldog(data)
    response = post_tg(
        groupid,
        "üö´¬´ Webhook endpoint for this chat has received something that doesn't understood yet. " +
        f"\n\nLink to logs for debugging: {url}",
        "markdown")
    return response


def deldog(data):
    """Pasing the stings to del.dog"""
    BASE_URL = 'https://del.dog'
    r = post(f'{BASE_URL}/documents', data=str(data).encode('utf-8'))
    if r.status_code == 404:
        r.raise_for_status()
    res = r.json()
    if r.status_code != 200:
        r.raise_for_status()
    key = res['key']
    if res['isUrl']:
        reply = f'DelDog URL: {BASE_URL}/{key}\nYou can view stats, etc. [here]({BASE_URL}/v/{key})'
    else:
        reply = f'{BASE_URL}/{key}'
    return reply


if __name__ == "__main__":
    # We can't use port 80 due to the root access requirement.
    port = int(environ.get("PORT", 8080))
    server.run(host="0.0.0.0", port=port)
